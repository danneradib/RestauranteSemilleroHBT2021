package com.heinsohn.semillero.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.heinsohn.semillero.dto.Usuarios;
import com.heinsohn.semillero.repository.UsuariariosRepository;
import com.heinsohn.semillero.repository.UsuariosJpaRepository;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@RestController
@RequestMapping("/usuarios")
public class UserController {

	@Autowired
	private UsuariosJpaRepository uJpaRepository;
	
	private UsuariariosRepository uRepository;
	
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	public UserController(UsuariariosRepository uRepository) {
		this.uRepository = uRepository;
	}
	
	/**
	 * Metodo que retorna los datos de los usuarios
	 * por medio del metodo HTTP.GET
	 * 
	 * @return String
	 */
	@ApiOperation(value = "Metodo que retorna los datos de los usuarios por medio del metodo HTTP.GET",
				  response = Integer.class, tags = "consultarUsuarios")
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = "Exitoso, funcion!"),
		@ApiResponse(code = 401, message = "No autorizado, pilas!"),
		@ApiResponse(code = 403, message = "No tienes permiso!"),
		@ApiResponse(code = 404, message = "No se encontro lo que buscabas!")
	})
	@GetMapping(//consumes = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE },
				produces = { MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE } )
	public List<Usuarios> getUsuario() {
		return (List<Usuarios>) uRepository.findAll();
	}
	
	/**
	 * Metodo que permite registrar los datos de un usuario
	 * por medio del metodo HTTP.POST
	 * 
	 * @return String
	 */
	@PostMapping
	public ResponseEntity<Usuarios> crearUsuario(@RequestBody Usuarios usuario) {
		if(null != usuario && (null != usuario.getNombre() && !"".equals(usuario.getNombre()))) {
			Usuarios usuarioEntity = uJpaRepository.save(usuario);
			if(null != usuarioEntity && usuarioEntity.getId() > 0)
				return ResponseEntity.status(HttpStatus.OK).body(usuarioEntity);
			else
				return ResponseEntity.status(HttpStatus.NOT_EXTENDED).body(null); 
		}
		else
			return ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE).body(null);
		
	}
	
	/**
	 * Metodo que permite actualizar los datos de un usuario
	 * por medio del metodo HTTP.PUT
	 * 
	 * @return String
	 */
	@PutMapping
	public @ResponseBody Usuarios actualizarUsuario(Usuarios usuario) {
		if(null != usuario && usuario.getId() > 0) {
			Usuarios u = uRepository.findById(usuario.getId()).get();
			if(null != u)
				return uRepository.save(usuario);
		}
		return null;
	}
	
	/**
	 * Este metodo permite eliminar la informaci√≥n
	 * de un usuario especifico
	 * 
	 * @return String
	 */
	@DeleteMapping
	public String eliminarUsuario(int idUsuario) {
		if(uJpaRepository.existsById(idUsuario)) {
			Optional<Usuarios> u = uJpaRepository.findById(idUsuario);
			if(u.isPresent()) {
				uJpaRepository.delete(u.get());
				uJpaRepository.flush();
				return "Se elimino el usuario exitosament!";
			}
		}
		return "No es posible eliminar el usuario, no existe un usuario con el identificador ingresado!";
	}
	
}
